#!/bin/sh

#set -e

# Source debconf library.
. /usr/share/debconf/confmodule

PSQL='sudo postgres psql'
DB_USER='nipap'
DB_PASS=`</dev/urandom tr -dc [:alpha:] | head -c16`
DB_NAME='nipap'


POSTGRES_INSTALLED=0
NIPAP_DB_EXISTS=0
NIPAP_DB_VERSION=0

# determine if postgres is installed
su postgres -c 'psql --version' > /dev/null 2>&1
if [ $? -eq 0 ]; then
	POSTGRES_INSTALLED=1

	# does the NIPAP database exist?
	if [ "`su postgres -c "psql -c '\l+'" | awk -F"|" '{ if ($1~/^ *nipap *$/) { gsub(/^ */, "", $1); gsub(/ *$/, "", $1); print $1 } }'`" = "nipap" ]; then
		NIPAP_DB_EXISTS=1

		# figure out version of db
		DB_COMMENT=`su postgres -c "psql -c '\l+'" | awk -F"|" '{ if ($1~/^ *nipap *$/) { print $9 } }'`
		echo "$DB_COMMENT" | grep "schema version: [0-9]\+$" > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			# seems to be a DB comment with proper version
			NIPAP_DB_VERSION=`echo $DB_COMMENT | sed 's/.*schema version: //'`
		fi
	fi
fi



case "$1" in
	configure)
		# start
		db_get nipapd/startup
		if [ "$RET" = "true" ]; then
			sed -i -e 's/RUN=.*/RUN=yes/' /etc/default/nipapd
		else
			sed -i -e 's/RUN=.*/RUN=no/' /etc/default/nipapd
		fi

		# if database already exists
		if [ "$NIPAP_DB_EXISTS" = "1" ]; then
			# do the upgrade dance...
			# TODO: add it!
			echo -n

		else
			# first time setup
			db_get nipapd/autoconf
			if [ "$RET" = "true" ]; then
				# setup new user
				sudo -u postgres createuser -S -D -R -w $DB_USER >/dev/null 2>&1
				sudo -u postgres psql -q -c "ALTER USER $DB_USER ENCRYPTED PASSWORD '$DB_PASS'" >/dev/null 2>&1
				# create database and install plpgsql
				sudo -u postgres createdb -O $DB_USER $DB_NAME >/dev/null 2>&1
				sudo -u postgres createlang -d $DB_NAME plpgsql >/dev/null 2>&1
				# load ip4r
				sudo -u postgres psql -q -d $DB_NAME -c "CREATE EXTENSION ip4r" >/dev/null 2>&1
				# load NIPAP database structure
				sudo -u postgres psql -q -d $DB_NAME -f /usr/share/nipap/sql/functions.plsql >/dev/null 2>&1
				sudo -u postgres psql -q -d $DB_NAME -f /usr/share/nipap/sql/ip_net.plsql >/dev/null 2>&1

				# change ownership for tables
				# TODO: since we depend on postgresql 9.1, we can use GRANT ALL ON ALL TABLES TO $DB_USER instead
				for table in `sudo -u postgres psql -qAt -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';" $DB_NAME`; do
					sudo -u postgres psql -c "ALTER TABLE $table OWNER TO $DB_USER" $DB_NAME >/dev/null 2>&1;
				done
				# change ownership for sequences
				for table in `sudo -u postgres psql -qAt -c "SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'public';" $DB_NAME`; do
					sudo -u postgres psql -c "ALTER TABLE $table OWNER TO $DB_USER" $DB_NAME >/dev/null 2>&1;
				done
				# change ownership for views
				for table in `sudo -u postgres psql -qAt -c "SELECT table_name FROM information_schema.views WHERE table_schema = 'public';" $DB_NAME`; do
					sudo -u postgres psql -c "ALTER TABLE $table OWNER TO $DB_USER" $DB_NAME >/dev/null 2>&1;
				done

				# update nipap.conf with database credentials
				cat /etc/nipap/nipap.conf.dist | sed -e "s/db_user *= *[^ ]\+/db_user = $DB_USER /" -e "s/db_name *= *[^ ]\+/db_name = $DB_NAME /" -e "s/db_pass *= *[^ ]\+/db_pass = $DB_PASS /" > /etc/nipap/nipap.conf
			fi
		fi

		;;
esac
