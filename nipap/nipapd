#!/usr/bin/python
# vim: et sw=4 sts=4 :

import fcntl
import logging
import logging.handlers
import optparse
import os
import sys

import nipap.xmlrpc
from nipap.nipapconfig import NipapConfig

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", help="enable debugging, implies -f")
    parser.add_option("-f", "--foreground", action="store_true", dest="foreground", help="run in foreground and log to stdout")
    parser.add_option("-p", "--port", dest="port", type="int", help="listen to TCP port PORT")
    parser.add_option("-c", "--config", dest="config_file", type="string", default="/etc/nipap/nipap.conf", help="read configuration from file CONFIG_FILE")
    parser.add_option("-P", "--pid-file", type="string", help="write a PID file")

    (options, args) = parser.parse_args()

    logger = logging.getLogger()
    log_format = "%(levelname)-8s %(message)s"

    # do logging to syslog by default
    log_syslog = logging.handlers.SysLogHandler(address = '/dev/log')
    log_syslog.setFormatter(logging.Formatter(log_format))
    log_syslog.setLevel(logging.WARNING)
    logger.addHandler(log_syslog)

    default = {
        'debug': False,
        'foreground': False,
        'pid_file': None,
        'port': 1337
    }

    try:
        cfg = NipapConfig(options.config_file, default)
    except nipap.nipapconfig.NipapConfigError, exc:
        if options.config_file:
            print >> sys.stderr, "The specified configuration file ('" + options.config_file + "') does not exist"
            sys.exit(1)
        # if no config file is specified, we'll live with our defaults


    # Go through list of optparse options and set the config object to
    # their values.
    for val in parser.option_list:

        if val.dest is None:
            continue
        # This is not very pretty... but how can I otherwise access elements
        # in the options object from variables?
        try:
            if eval('options.' + val.dest) is None:
                continue
        except AttributeError:
            continue

        cfg.set('nipapd', val.dest, str(eval("options." + val.dest)))


    if cfg.getboolean('nipapd', 'debug') or cfg.getboolean('nipapd', 'foreground'):
        # log to stdout
        log_stream = logging.StreamHandler()
        log_stream.setFormatter(logging.Formatter("%(asctime)s: " + log_format))
        if cfg.getboolean('nipapd', 'debug'):
            logger.setLevel(logging.DEBUG)

        logger.addHandler(log_stream)
    else:
        import daemon
        ret = daemon.createDaemon()


    # pid file handling
    if cfg.get('nipapd', 'pid_file'):
        # need a+ to be able to read PID from file
        lf = open(cfg.get('nipapd', 'pid_file'), 'a+', 0)
        try:
            fcntl.lockf(lf, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            logger.error('NIPAPd already running (pid: ' + lf.read().strip() + ')')
            sys.exit(1)
        logger.debug('Writing PID to file: ' + cfg.get('nipapd', 'pid_file'))
        lf.truncate()
        lf.write('%d\n' % os.getpid())
        lf.flush()


    import twisted
    try:
        napxml = nipap.xmlrpc.NipapXMLRPC()
        napxml.run()
    except twisted.internet.error.CannotListenError, exc:
        logger.error(exc)
        sys.exit(1)

