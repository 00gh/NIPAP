#!/usr/bin/python
# vim: et sw=4 sts=4 :

import logging
import logging.handlers
import optparse
import xmlrpc
from nipapconfig import NipapConfig

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", help="enable debugging, implies -f")
    parser.add_option("-f", "--foreground", action="store_true", dest="foreground", help="run in foreground and print to stdout")
    parser.add_option("-p", "--port", dest="port", type="int", help="listen to TCP port PORT")
    parser.add_option("-c", "--config", dest="config_file", type="string", default="/etc/nipap/nipap.conf", help="read configuration file CONFIG_FILE")

    (options, args) = parser.parse_args()

    logger = logging.getLogger()
    log_format = "%(levelname)-8s %(message)s"

    # do logging to syslog by default
    log_syslog = logging.handlers.SysLogHandler(address = '/dev/log')
    log_syslog.setFormatter(logging.Formatter(log_format))
    log_syslog.setLevel(logging.WARNING)
    logger.addHandler(log_syslog)

    default = {
        'debug': False,
        'foreground': False,
        'port': 1337
    }

    cfg = NipapConfig(options.config_file, default)

    # Go through list of optparse options and set the config object to
    # their values.
    for val in parser.option_list:

        if val.dest is None:
            continue
        # This is not very pretty... but how can I otherwise access elements
        # in the options object from variables?
        try:
            if eval('options.' + val.dest) is None:
                continue
        except AttributeError:
            continue

        cfg.set('nipapd', val.dest, str(eval("options." + val.dest)))


    if cfg.getboolean('nipapd', 'debug') or cfg.getboolean('nipapd', 'foreground'):
        # log to stdout
        log_stream = logging.StreamHandler()
        log_stream.setFormatter(logging.Formatter("%(asctime)s: " + log_format))
        if cfg.getboolean('nipapd', 'debug'):
            logger.setLevel(logging.DEBUG)

        logger.addHandler(log_stream)
    else:
        import daemon
        ret = daemon.createDaemon()

    napxml = xmlrpc.NapXMLRPC()
    napxml.run()
