TODO
====

Core
----
 - write performance test suite with output format to GraphViz - we want le
   graphs!
 - find_free_prefix() should support a start address from where it should start
   searching for new candidate prefixes. prolly useful for paginating output in
   a potential web gui
 - add test suite for the XML-RPC API
 - authentication in XML-RPC framework
 - authorization in XML-RPC framework
 - accounting in NAP
 - write test cases for the search_prefix function


polish, chrome and shine
------------------------
 - configuration file for napd, save DB settings
 - generate random password for DB user on make install and save in napd
   configuration file automatically
 - debian packaging
 - redhat packaging?
 - RIPE integration?


Web UI
------
 - Show nice error messages when a query fails.
 - Removing prefixes
 - Add a cache timeout to the NapModel object cache
 - Implement default type of prefix assigned from a pool
 - Implement some form of nice pop-up system, Google+ style for help dialogs
 - Add prev/next buttons in result set

 - Possible race condition, when entering a query, searches are performed for every character entered. If 1.3.3.0/24 is entered, amongst others there will be a query for '1.3.3.0/2' and then the final one for '1.3.3.0/24'. The final one can maximally return ~250 prefixes while the one before that can return way more and thus is likely to take more time. The web interface seems to display the last returned result and so would in this instance display the final-1 instead of the final search quert result.
  a) Perhaps a check to make sure that the result set matches the inputted query, this could on the other hand lead to a result set that we want to show not being display as the user has already added another character to the search form. 
  b) Could check for the length of the query string returned is shorter than the one currently in the input form and not display the result.
  c) Add some sequence number and don't display result set if seq is less than currently displayed result set

.. todolist::
